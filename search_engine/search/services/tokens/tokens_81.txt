Характеристики
объектно
ориентированных
языков
Язык
программирования
Предисловие
Введение
чего
начать
Установка
Привет
Мир
Программирование
игры
загадки
Общие
концепции
Переменные
изменяемость
Типы
Данных
Функции
Комментарии
Управляющие
конструкции
Понимание
владения
Что
такое
владение
Ссылки
заимствование
Тип
среза
Использование
структур
объединения
связанных
Определение
создание
экземпляров
Пример
программы
использующей
структуры
Синтаксис
метода
Перечисления
сопоставление
образцом
Конструкция
потока
управления
Лаконичный
поток
Управление
растущими
проектами
помощью
пакетов
крейтов
модулей
Пакеты
крейты
областью
действия
конфиденциальностью
Пути
элемент
дереве
путей
область
видимости
ключевого
слова
коллекции
Хранение
списков
значений
векторами
закодированного
текста
строками
ключей
связанными
значениями
Обработка
ошибок
Неустранимые
ошибки
Устранимые
трейты
время
жизни
Обобщённые
разделяемого
поведения
Валидация
ссылок
сроков
Написание
автоматических
тестов
писать
тесты
выполнением
Организация
Проект
вводом
выводом
командной
строки
Получение
аргументов
Чтение
файла
Рефакторинг
обеспечения
модульности
улучшения
обработки
Разработка
функциональности
библиотеки
разработки
тестирование
Работа
переменными
среды
Запись
сообщений
ошибках
вместо
Функциональные
возможности
языка
итераторы
замыкания
анонимные
которые
захватывают
своё
окружение
последовательности
элементов
итераторов
Улучшение
нашего
проекта
Сравнение
производительности
циклы
Подробнее
Настройка
билдов
профилей
выпуска
Публикация
крейта
Рабочие
области
бинарных
файлов
Расширение
возможностей
добавления
пользовательских
команд
Умные
указатели
указания
данные
куче
умными
указателями
обычными
ссылками
трейта
Выполнение
кода
очистке
умный
указатель
подсчётом
внутренняя
Ссылочные
могут
привести
утечке
памяти
Безбоязненный
параллелизм
потоков
параллельного
выполнения
Пересылка
передачи
потоками
общим
состоянием
Расширяемый
трейтов
ориентированного
трейт
объектов
допускающих
значения
разных
типов
Реализация
шаблона
проектирования
Шаблоны
Все
места
где
использоваться
Опровержимость
может
шаблон
соответствовать
Расширенные
Небезопасный
код
Продвинутые
типажи
Макросы
Финальный
многопоточного
веб
сервера
однопоточного
Превращение
многопоточный
сервер
Мягкое
завершение
работы
очистка
Приложения
Ключевые
Операторы
символы
Выводимые
Полезные
инструменты
Редакции
Переводы
книги
создаётся
сообществе
программистов
нет
единого
мнения
том
какими
свойствами
должен
обладать
считаться
ориентированным
повлияли
многие
парадигмы
включая
ООП
например
главе
мы
изучали
особенности
пришедшие
функционального
Однозначно
можно
утверждать
языкам
присущи
следующие
характерные
объекты
инкапсуляция
наследование
Давайте
рассмотрим
каждая
них
означает
поддерживает
их
содержат
поведение
Книга
Приёмы
Паттерны
просторечии
называемая
банды
четырёх
представляет
собой
сборник
примеров
ней
даётся
следующее
ориентированные
состоят
Объект
сущность
своего
рода
контейнер
данными
процедурами
работают
этими
Процедуры
обычно
называются
методами
операциями
соответствии
этим
определением
является
языком
структурах
перечислениях
содержатся
блоках
определяются
методы
Хотя
имеющие
объектами
они
обеспечивают
функциональность
соответствующую
определению
книге
скрывающая
детали
реализации
Другим
аспектом
связанным
программированием
идея
инкапсуляции
объекта
недоступны
использующего
этот
Единственный
способ
взаимодействия
объектом
его
публичный
интерфейс
использующий
иметь
взаимодействовать
внутренними
напрямую
изменять
позволяет
реорганизовывать
внутренние
свойства
необходимости
который
использует
уже
говорили
управлять
инкапсуляцией
можем
использовать
ключевое
слово
определить
какие
модули
нашем
коде
будут
публичными
всё
остальное
умолчанию
будет
приватными
структуру
которой
есть
поле
содержащее
вектор
Также
структура
среднее
арифметическое
чисел
этого
вектора
таким
образом
нужно
вычислять
каждый
раз
оно
кому
то
понадобится
Другими
словами
кэшировать
вычисленное
нас
листинге
приведено
Файл
Листинг
содержит
список
целых
Обратите
внимание
помечена
ключевым
словом
другому
коду
её
однако
поля
остаются
недоступными
Это
важно
потому
хотим
гарантировать
обновление
среднего
добавлении
удалении
элемента
списка
получить
нужное
определив
структуре
показано
примере
публичных
методов
Публичные
являются
единственным
способом
изменить
экземпляре
Когда
добавляется
методом
удаляется
каждого
этих
вызывает
приватный
метод
позаботится
обновлении
оставляем
внешний
мог
добавлять
удалять
элементы
непосредственно
противном
случае
оказаться
синхронизировано
подобном
вмешательстве
возвращает
значение
внешнему
читать
Поскольку
инкапсулировали
легко
такие
аспекты
будущем
могли
тому
сигнатуры
неизменными
нуждаться
изменении
получилось
достичь
сделали
доступным
имеют
разные
удаления
поэтому
вероятно
измениться
он
модифицирует
обязательным
определения
соответствует
этому
требованию
Возможность
модификатор
доступа
различных
частей
скрыть
система
совместного
использования
механизм
которого
унаследовать
другого
родительского
повторно
определять
быть
Здесь
способа
наследующую
родительской
макроса
вы
привыкли
своём
наборе
инструментов
можете
другие
решения
зависимости
того
какой
причине
изначально
хотите
выбрать
двум
основным
причинам
Одна
повторного
реализовать
определённое
одного
типа
позволит
вам
эту
реализацию
ограниченный
типажа
видели
добавили
методе
Любой
реализующий
свойство
доступный
дополнительного
похоже
родительский
класс
имеет
наследник
тоже
переопределить
реализуем
типаж
дочерний
переопределяющий
унаследованного
класса
Вторая
причина
наследования
относится
системе
тех
Эта
называется
полиморфизм
подменять
исполнения
одинаковые
многих
людей
синонимом
самом
деле
более
общая
концепция
относящаяся
работать
нескольких
такими
типами
выступают
подклассы
наследовании
абстрагирования
ограничения
типажей
эти
должны
предоставлять
иногда
называют
ограниченным
параметрическим
полиморфизмом
подход
разработке
последнее
утратило
популярность
языках
часто
существует
риск
будем
наследовать
чаще
необходимо
всегда
всеми
характеристиками
использовании
варианта
сделать
дизайн
менее
гибким
появляется
вызова
подклассов
смысла
вызывают
неприменимы
подклассу
некоторых
разрешается
одиночное
подкласс
наследоваться
ещё
больше
ограничивает
гибкость
применяется
альтернативный
использованием
посмотрим
реализуют
