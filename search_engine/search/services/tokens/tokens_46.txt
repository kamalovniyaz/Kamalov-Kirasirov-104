Написание
автоматических
тестов
Язык
программирования
Предисловие
Введение
чего
начать
Установка
Привет
Мир
Программирование
игры
загадки
Общие
концепции
Переменные
изменяемость
Типы
Данных
Функции
Комментарии
Управляющие
конструкции
Понимание
владения
Что
такое
владение
Ссылки
заимствование
Тип
среза
Использование
структур
объединения
связанных
Определение
создание
экземпляров
Пример
программы
использующей
структуры
Синтаксис
метода
Перечисления
сопоставление
образцом
Конструкция
потока
управления
Лаконичный
поток
Управление
растущими
проектами
помощью
пакетов
крейтов
модулей
Пакеты
крейты
областью
действия
конфиденциальностью
Пути
элемент
дереве
путей
область
видимости
ключевого
слова
коллекции
Хранение
списков
значений
векторами
закодированного
текста
строками
ключей
связанными
значениями
Обработка
ошибок
Неустранимые
ошибки
Устранимые
трейты
характеристики
время
жизни
Обобщённые
разделяемого
поведения
Валидация
ссылок
сроков
писать
тесты
выполнением
Организация
Проект
вводом
выводом
командной
строки
Получение
аргументов
Чтение
файла
Рефакторинг
обеспечения
модульности
улучшения
обработки
Разработка
функциональности
библиотеки
разработки
тестирование
Работа
переменными
среды
Запись
сообщений
ошибках
вместо
Функциональные
возможности
языка
итераторы
замыкания
анонимные
которые
захватывают
своё
окружение
последовательности
элементов
итераторов
Улучшение
нашего
проекта
Сравнение
производительности
циклы
Подробнее
Настройка
билдов
профилей
выпуска
Публикация
крейта
Рабочие
области
бинарных
файлов
Расширение
возможностей
добавления
пользовательских
команд
Умные
указатели
указания
данные
куче
умными
указателями
обычными
ссылками
трейта
Выполнение
кода
очистке
умный
указатель
подсчётом
внутренняя
Ссылочные
могут
привести
утечке
памяти
Безбоязненный
параллелизм
потоков
параллельного
выполнения
Пересылка
передачи
потоками
общим
состоянием
Расширяемый
трейтов
объектно
ориентированного
ориентированных
языков
трейт
объектов
допускающих
значения
разных
типов
Реализация
шаблона
проектирования
Шаблоны
Все
места
где
использоваться
Опровержимость
может
шаблон
соответствовать
Расширенные
Небезопасный
код
Продвинутые
типажи
Макросы
Финальный
многопоточного
веб
сервера
однопоточного
Превращение
многопоточный
сервер
Мягкое
завершение
работы
очистка
Приложения
Ключевые
Операторы
символы
Выводимые
Полезные
инструменты
Редакции
Переводы
книги
создаётся
автоматизированных
своём
эссе
года
сказал
быть
очень
эффективным
способом
показать
наличие
это
безнадёжно
неадекватно
показа
их
отсутствия
значит
мы
должны
пытаться
тестировать
столько
сколько
можем
Корректностью
считается
какой
степени
наш
выполняет
то
задумывали
разработан
учётом
большой
озабоченности
программ
корректность
сложна
нелегко
доказуема
Система
типизации
берет
себя
огромную
часть
этого
бремени
она
уловить
абсолютно
проблемы
Поэтому
предусмотрена
возможность
написания
автотестов
Допустим
пишем
функцию
которая
прибавляет
любому
переданному
ей
числу
Сигнатура
этой
принимает
целое
число
качестве
параметра
возвращает
результата
реализуем
компилируем
эту
всю
проверку
заимствований
которую
вы
уже
изучили
убедиться
например
передаём
значение
недопустимую
ссылку
способен
проверить
эта
функция
сделает
задумали
есть
вернёт
параметр
плюс
скажем
минус
тут
приходят
помощь
написать
утверждают
возвращаемое
будет
запускать
эти
всякий
раз
вносим
изменения
любое
существующее
правильное
поведение
изменилось
сложный
навык
сможем
охватить
детали
хороших
одной
главе
обсудим
основные
подходы
тестированию
поговорим
аннотациях
макросах
доступных
вам
поведении
умолчанию
параметрах
предусмотренных
запуска
также
том
организовать
модульные
интеграционные
