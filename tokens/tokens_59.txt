Обработка
последовательности
элементов
помощью
итераторов
Язык
программирования
Предисловие
Введение
чего
начать
Установка
Привет
Мир
Программирование
игры
загадки
Общие
концепции
Переменные
изменяемость
Типы
Данных
Функции
Комментарии
Управляющие
конструкции
Понимание
владения
Что
такое
владение
Ссылки
заимствование
Тип
среза
Использование
структур
объединения
связанных
Определение
создание
экземпляров
Пример
программы
использующей
структуры
Синтаксис
метода
Перечисления
сопоставление
образцом
Конструкция
потока
управления
Лаконичный
поток
Управление
растущими
проектами
пакетов
крейтов
модулей
Пакеты
крейты
областью
действия
конфиденциальностью
Пути
элемент
дереве
путей
область
видимости
ключевого
слова
коллекции
Хранение
списков
значений
векторами
закодированного
текста
строками
ключей
связанными
значениями
ошибок
Неустранимые
ошибки
Устранимые
трейты
характеристики
время
жизни
Обобщённые
разделяемого
поведения
Валидация
ссылок
сроков
Написание
автоматических
тестов
Как
писать
тесты
выполнением
Организация
Проект
вводом
выводом
командной
строки
Получение
аргументов
Чтение
файла
Рефакторинг
обеспечения
модульности
улучшения
обработки
Разработка
функциональности
библиотеки
разработки
тестирование
Работа
переменными
среды
Запись
сообщений
ошибках
вместо
Функциональные
возможности
языка
итераторы
замыкания
анонимные
которые
захватывают
своё
окружение
Улучшение
нашего
проекта
Сравнение
производительности
циклы
Подробнее
Настройка
билдов
профилей
выпуска
Публикация
крейта
Рабочие
области
бинарных
файлов
Расширение
возможностей
добавления
пользовательских
команд
Умные
указатели
указания
данные
куче
умными
указателями
обычными
ссылками
трейта
Выполнение
кода
очистке
умный
указатель
подсчётом
внутренняя
Ссылочные
могут
привести
утечке
памяти
Безбоязненный
параллелизм
потоков
параллельного
выполнения
Пересылка
передачи
потоками
общим
состоянием
Расширяемый
трейтов
объектно
ориентированного
ориентированных
языков
трейт
объектов
допускающих
значения
разных
типов
Реализация
шаблона
проектирования
Шаблоны
Все
места
где
использоваться
Опровержимость
может
шаблон
соответствовать
Расширенные
Небезопасный
код
Продвинутые
типажи
Макросы
Финальный
многопоточного
веб
сервера
однопоточного
Превращение
многопоточный
сервер
Мягкое
завершение
работы
очистка
Приложения
А
Ключевые
Операторы
символы
Выводимые
Полезные
инструменты
Редакции
Переводы
книги
создаётся
паттерна
Итератор
помогает
необходимости
поочерёдного
какой
операции
элементами
отвечает
логику
перебора
момента
завершения
Используя
вам
нужно
самостоятельно
реализовывать
всю
эту
ленивые
то
есть
они
делают
ничего
пока
вы
вызовете
специальные
методы
потребляющие
задействовать
его
Например
листинге
создаёт
вектора
вызывая
метод
определённый
Сам
себе
этот
делает
полезного
Листинг
итератора
хранится
переменной
Создав
мы
можем
использовать
различными
способами
главы
совершали
обход
массива
цикл
какого
каждым
капотом
это
неявно
создавало
затем
потребляло
сих
пор
касались
того
работает
примере
листинга
отделили
использования
цикле
использующем
каждый
участвует
одной
итерации
цикла
ходе
которой
выводится
экран
значение
языках
стандартные
которых
предоставляют
скорее
всего
напишите
функциональность
так
создадите
переменную
значением
использовав
её
получения
элемента
индексу
будете
увеличивать
оно
достигнет
числа
равного
количеству
векторе
выполняют
вас
сокращая
количество
повторяющегося
который
потенциально
быть
написан
неправильно
дают
гибкость
позволяя
одинаковые
принципы
видами
последовательностей
структурами
можно
индексировать
Давайте
рассмотрим
Типаж
реализуют
определён
стандартной
библиотеке
выглядит
Обратите
внимание
данное
объявление
использует
новый
определяют
ассоциированный
этим
типажом
поговорим
ассоциированных
типах
главе
Сейчас
знать
требует
реализаций
типажа
определить
требуемый
им
данный
используется
методе
Другими
словами
будет
являться
типом
возвращает
разработчики
определяли
один
раз
обёрнутый
вариант
итерация
завершена
вызывать
напрямую
показано
какие
возвращаются
повторных
вызовах
созданного
Файл
Вызов
нам
сделать
изменяемой
изменяет
внутреннее
состояние
которое
отслеживания
он
находится
потребляет
было
делать
использовании
потому
забрал
сделал
нас
Заметьте
также
получаем
являются
неизменяемыми
неизменяемым
ссылкам
хотим
создать
становится
владельцем
принадлежащие
ему
вызвать
Точно
перебирать
изменяемые
потребляют
У
несколько
методов
умолчанию
предоставляется
библиотекой
можете
узнать
этих
методах
просмотрев
документацию
Некоторые
вызывают
своём
определении
поэтому
необходимо
реализовать
реализации
вызывающие
называются
потребляющими
адаптерами
их
Примером
служить
забирает
перебирает
элементы
многократно
тем
самым
потребляя
процессе
добавляет
текущей
сумме
итоговое
завершении
приведён
тест
иллюстрирующий
суммы
всех
итераторе
вызова
которого
вызван
создают
другие
Адаптеры
определённые
этого
различные
изменяя
аспекты
исходного
В
показан
адаптера
принимает
замыкание
вызывает
каждого
мере
изменённые
здесь
котором
увеличен
создания
нового
Однако
выдаёт
предупреждение
указанное
нами
никогда
вызывается
напоминает
почему
ленивы
потребить
устранить
воспользуемся
методом
использовали
собирает
полученные
коллекцию
указанного
типа
собираем
вектор
результаты
возвращается
результате
итоге
содержать
увеличенный
потребления
Поскольку
указать
любую
операцию
которую
выполнить
элементом
отличный
позволяют
задавать
желаемое
поведение
этом
особенности
обеспечивает
выстроить
цепочку
нескольких
вызовов
адаптеров
сложных
действий
удобочитаемом
виде
ленивыми
результатов
потребляющего
замыканий
окружения
Многие
принимают
качестве
обычно
будем
указывать
адаптерам
фиксируют
получает
включено
итерацию
создаваемую
используем
замыканием
захватывает
своего
возвращать
обувь
размера
фиксирующим
Функция
параметров
экземплярами
обуви
размер
содержащий
теле
вызываем
превратить
другой
содержит
параметр
сравнивает
размером
каждой
пары
оставляя
Наконец
возвращаемые
адаптированным
итератором
возвращаемый
функцией
показывает
возвращаем
туфли
совпадает
указанным
