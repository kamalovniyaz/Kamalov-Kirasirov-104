Конструкция
потока
управления
Язык
программирования
Предисловие
Введение
чего
начать
Установка
Привет
Мир
Программирование
игры
загадки
Общие
концепции
Переменные
изменяемость
Типы
Данных
Функции
Комментарии
Управляющие
конструкции
Понимание
владения
Что
такое
владение
Ссылки
заимствование
Тип
среза
Использование
структур
объединения
связанных
Определение
создание
экземпляров
Пример
программы
использующей
структуры
Синтаксис
метода
Перечисления
сопоставление
образцом
Лаконичный
поток
Управление
растущими
проектами
помощью
пакетов
крейтов
модулей
Пакеты
крейты
областью
действия
конфиденциальностью
Пути
элемент
дереве
путей
область
видимости
ключевого
слова
коллекции
Хранение
списков
значений
векторами
закодированного
текста
строками
ключей
связанными
значениями
Обработка
ошибок
Неустранимые
ошибки
Устранимые
трейты
характеристики
время
жизни
Обобщённые
разделяемого
поведения
Валидация
ссылок
сроков
Написание
автоматических
тестов
Как
писать
тесты
выполнением
Организация
Проект
вводом
выводом
командной
строки
Получение
аргументов
Чтение
файла
Рефакторинг
обеспечения
модульности
улучшения
обработки
Разработка
функциональности
библиотеки
разработки
тестирование
Работа
переменными
среды
Запись
сообщений
ошибках
вместо
Функциональные
возможности
языка
итераторы
замыкания
анонимные
которые
захватывают
своё
окружение
последовательности
элементов
итераторов
Улучшение
нашего
проекта
Сравнение
производительности
циклы
Подробнее
Настройка
билдов
профилей
выпуска
Публикация
крейта
Рабочие
области
бинарных
файлов
Расширение
возможностей
добавления
пользовательских
команд
Умные
указатели
указания
данные
куче
умными
указателями
обычными
ссылками
трейта
Выполнение
кода
очистке
умный
указатель
подсчётом
внутренняя
Ссылочные
могут
привести
утечке
памяти
Безбоязненный
параллелизм
потоков
параллельного
выполнения
Пересылка
передачи
потоками
общим
состоянием
Расширяемый
трейтов
объектно
ориентированного
ориентированных
языков
трейт
объектов
допускающих
значения
разных
типов
Реализация
шаблона
проектирования
Шаблоны
Все
места
где
использоваться
Опровержимость
может
шаблон
соответствовать
Расширенные
Небезопасный
код
Продвинутые
типажи
Макросы
Финальный
многопоточного
веб
сервера
однопоточного
Превращение
многопоточный
сервер
Мягкое
завершение
работы
очистка
Приложения
А
Ключевые
Операторы
символы
Выводимые
Полезные
инструменты
Редакции
Переводы
книги
создаётся
Управляющая
В
есть
чрезвычайно
мощный
механизм
потоком
именуемый
который
позволяет
сравнивать
значение
различными
шаблонами
затем
выполнять
зависимости
того
какой
шаблонов
совпал
состоять
литеральных
имён
переменных
подстановочных
знаков
многого
другого
главе
рассматриваются
различные
виды
они
делают
Сила
заключается
выразительности
том
компилятор
проверяет
возможные
случаи
обработаны
Думайте
выражении
машине
сортировки
монет
монеты
скользят
дорожке
размеру
отверстиями
каждая
монета
падает
первое
попавшееся
отверстие
которое
она
поместилась
Таким
образом
проходят
каждый
первом
подходящем
шаблоне
попадает
соответствующий
блок
будет
Говоря
монетах
давайте
используем
их
качестве
примера
используя
этого
мы
напишем
функцию
которая
получать
вход
неизвестную
монету
Соединённых
Штатов
счётной
определять
какая
возвращать
её
стоимость
центах
показано
листинге
Листинг
Перечисление
выражение
использующее
его
варианты
разберём
Сначала
пишется
ключевое
слово
следует
данном
случае
является
значением
Это
выглядит
очень
похоже
условное
используемое
большая
разница
должно
булево
здесь
быть
любой
этом
примере
типа
объявленное
строке
Далее
идут
ветки
состоят
двух
частей
некоторый
первая
ветка
имеет
идёт
оператор
разделяет
отделяется
последующей
помощи
запятой
Когда
выполняется
оно
сравнивает
полученное
каждого
ответвления
порядку
образец
совпадает
то
связанный
этим
этот
соответствует
значению
продолжается
следующей
так
автомате
сортировке
нас
столько
ответвлений
сколько
нужно
наш
состоит
четырёх
каждым
ответвлением
выражением
выражения
соответствующем
ответвлении
возвращается
всего
Обычно
фигурные
скобки
используются
совпадающей
ветви
невелик
ветвь
возвращает
вы
хотите
выполнить
несколько
строк
одной
должны
использовать
запятая
этой
необязательна
Например
следующий
печатает
раз
метод
вызывается
он
последнее
блока
Образцы
привязывающие
ещё
одно
полезное
качество
веток
привязываться
частям
тех
совпали
шаблоном
этому
можно
извлекать
вариантов
изменим
один
хранил
себе
С
год
Соединённые
Штаты
чеканили
центов
различным
дизайном
стороне
одна
другая
получила
дизайна
штата
четверть
доллара
имела
эту
дополнительную
особенность
можем
добавить
информацию
путём
изменения
варианта
включить
него
сделано
котором
вариант
также
сохраняет
Представьте
ваш
друг
пытается
собрать
четвертаки
всех
Сортируя
типу
будем
сообщать
название
которому
относится
четвертак
друга
нет
такой
мог
свою
коллекцию
добавляем
переменную
именем
значениям
совпадёт
переменная
привязана
четвертака
сможем
коде
сделаем
вызов
иметь
каждой
них
совпадать
пока
достигнем
момент
привяжется
привязку
получив
внутреннее
предыдущем
разделе
хотели
получить
случая
использовании
обработать
уже
делали
перечислением
сравнения
независимо
останется
прежним
Допустим
хотим
написать
принимает
внутри
добавляет
существующему
функция
должна
пытаться
какие
операции
Такую
довольно
легко
выражению
выглядеть
использующая
более
подробно
рассмотрим
вызываем
теле
сравниваем
ветвью
сопоставления
образцу
поэтому
продолжаем
следующим
Тогда
привязывается
содержащемуся
получает
ассоциированный
данного
создаём
новое
Теперь
второй
входим
первым
данной
подразумевает
наличие
какого
было
бы
программа
останавливается
находится
справа
первой
никакие
другие
сравниваются
Комбинирование
перечислений
полезно
многих
ситуациях
часто
будете
видеть
подобную
комбинацию
сделать
привязать
данным
основе
привязанных
показаться
немного
сложным
привыкнете
захотите
такая
возможность
была
языках
неизменно
любимый
пользователями
приём
объемлет
аспект
обсудить
покрывать
версию
нашей
содержит
ошибку
компилируется
обработали
вызовет
дефект
программе
счастью
знает
умеет
ловить
случай
попытаемся
скомпилировать
получим
компиляции
описали
упустили
являются
исчерпывающими
покрыть
был
корректным
Особенно
даёт
нам
забыть
явным
тем
самым
защищает
предположения
делает
невозможным
совершить
миллиард
долларов
которой
говорилось
ранее
Универсальные
заполнитель
специальные
нескольких
определённых
остальных
действие
умолчанию
реализуем
игру
выпадении
игрок
двигается
новую
модную
шляпу
выпадает
теряет
значениях
перемещается
мест
игровом
поле
реализующий
логику
результат
броска
костей
жёстко
закодирован
случайным
вся
остальная
логика
представлена
функциями
тел
входит
рамки
первых
литеральные
последней
охватывает
остальные
которую
решили
назвать
выполняемый
использует
передавая
перечислили
потому
последний
паттерн
всем
указанным
конкретном
списке
универсальный
удовлетворяет
требованию
соответствие
исчерпывающим
Обратите
внимание
поместить
ветку
универсальным
оцениваются
предупредит
добавим
универсального
эти
последующие
никогда
будут
выполняться
универсальном
специальным
любому
говорит
собираемся
предупреждать
неиспользуемой
переменной
правила
бросить
изменить
исчерпывающей
полноты
явно
игнорируем
ветке
ничего
забыли
ход
происходило
бросаете
выразить
единичное
пустой
кортежа
упоминали
Кортежи
вместе
веткой
говорим
никакое
другое
шаблонам
предыдущих
ветках
запускать
никакой
шаблонах
совпадениях
поговорим
перейдём
синтаксису
полезен
слишком
многословно
