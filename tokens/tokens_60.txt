Улучшение
нашего
проекта
вводом
выводом
Язык
программирования
Предисловие
Введение
чего
начать
Установка
Привет
Мир
Программирование
игры
загадки
Общие
концепции
Переменные
изменяемость
Типы
Данных
Функции
Комментарии
Управляющие
конструкции
Понимание
владения
Что
такое
владение
Ссылки
заимствование
Тип
среза
Использование
структур
объединения
связанных
Определение
создание
экземпляров
Пример
программы
использующей
структуры
Синтаксис
метода
Перечисления
сопоставление
образцом
Конструкция
потока
управления
Лаконичный
поток
Управление
растущими
проектами
помощью
пакетов
крейтов
модулей
Пакеты
крейты
областью
действия
конфиденциальностью
Пути
элемент
дереве
путей
область
видимости
ключевого
слова
коллекции
Хранение
списков
значений
векторами
закодированного
текста
строками
ключей
связанными
значениями
Обработка
ошибок
Неустранимые
ошибки
Устранимые
трейты
характеристики
время
жизни
Обобщённые
разделяемого
поведения
Валидация
ссылок
сроков
Написание
автоматических
тестов
писать
тесты
выполнением
Организация
Проект
командной
строки
Получение
аргументов
Чтение
файла
Рефакторинг
обеспечения
модульности
улучшения
обработки
Разработка
функциональности
библиотеки
разработки
тестирование
Работа
переменными
среды
Запись
сообщений
ошибках
вместо
Функциональные
возможности
языка
итераторы
замыкания
анонимные
которые
захватывают
своё
окружение
последовательности
элементов
итераторов
Сравнение
производительности
циклы
Подробнее
Настройка
билдов
профилей
выпуска
Публикация
крейта
Рабочие
области
бинарных
файлов
Расширение
возможностей
добавления
пользовательских
команд
Умные
указатели
указания
данные
куче
умными
указателями
обычными
ссылками
трейта
Выполнение
кода
очистке
умный
указатель
подсчётом
внутренняя
Ссылочные
могут
привести
утечке
памяти
Безбоязненный
параллелизм
потоков
параллельного
выполнения
Пересылка
передачи
потоками
общим
состоянием
Расширяемый
трейтов
объектно
ориентированного
ориентированных
языков
трейт
объектов
допускающих
значения
разных
типов
Реализация
шаблона
проектирования
Шаблоны
Все
места
где
использоваться
Опровержимость
может
шаблон
соответствовать
Расширенные
Небезопасный
код
Продвинутые
типажи
Макросы
Финальный
многопоточного
веб
сервера
однопоточного
Превращение
многопоточный
сервер
Мягкое
завершение
работы
очистка
Приложения
Ключевые
Операторы
символы
Выводимые
Полезные
инструменты
Редакции
Переводы
книги
создаётся
Вооружившись
полученными
знаниями
итераторах
мы
можем
улучшить
реализацию
проекте
главы
применяя
того
сделать
некоторые
коде
более
понятными
лаконичными
Давайте
рассмотрим
нашу
Удаляем
используем
итератор
листинге
добавили
который
принимает
срез
создаёт
экземпляр
путём
индексации
клонирования
позволяя
структуре
владеть
этими
воспроизвели
это
было
Файл
Листинг
Репродукция
листинга
Ранее
говорили
стоит
беспокоиться
неэффективных
вызовах
потому
удалим
их
будущем
пришло
Нам
понадобился
здесь
параметре
нас
элементами
функция
владеет
владел
пришлось
клонировать
нашим
новым
знаниям
изменить
функцию
заимствования
она
принимала
качестве
аргумента
будем
использовать
функциональность
итератора
проверяет
длину
обращается
индексу
определённым
значениям
позволит
лучше
понять
делает
будет
обращаться
получит
распоряжение
перестанет
операции
индексирования
заимствованием
сможем
переместить
вызывать
создавать
новое
выделение
возвращённого
напрямую
Откройте
ввода
вывода
должен
выглядеть
следующим
образом
Сначала
изменим
начало
которая
была
теперь
использует
компилироваться
пока
обновим
Передача
возвращаемого
возвращает
собирать
вектор
затем
передавать
передаём
итератором
возвращённым
Далее
нужно
обновить
файле
вашего
сигнатуру
так
выглядела
ещё
скомпилируется
тело
Обновление
сигнатуры
определения
ожидаемого
параметра
Документация
стандартной
показывает
ею
этот
реализует
признак
обновили
параметр
имел
универсальный
ограниченный
трейтом
синтаксиса
обсуждали
разделе
параметры
означает
быть
любым
типом
реализующим
возвращающим
элементы
владеем
изменять
процессе
итерации
ним
добавить
ключевое
слово
спецификацию
его
изменяемым
методов
типажа
индексов
подправим
содержимое
Поскольку
знаем
вызвать
него
метод
обновлён
использования
Изменяем
методы
Помните
первое
значение
возвращаемых
имя
хотим
проигнорировать
перейти
следующему
значению
поэтому
сперва
вызываем
ничего
делаем
возвращаемым
значением
получить
которое
поместить
поле
извлечения
возвращается
задано
недостаточно
досрочно
возвращаем
То
самое
понятнее
адаптеров
также
воспользоваться
преимуществами
нашем
операциями
воспроизведена
написать
сжатом
виде
используя
адаптера
избежать
наличия
изменяемого
временного
вектора
Функциональный
стиль
предпочитает
минимизировать
количество
состояния
понятным
Удаление
позволить
поиск
параллельным
придётся
управлять
одновременным
доступом
вектору
показано
изменение
реализации
Напомним
назначение
вернуть
содержат
примеру
адаптер
сохранить
те
которых
собираем
совпадающие
другой
гораздо
проще
стесняйтесь
Выбор
циклами
итераторами
Следующий
логичный
вопрос
какой
вы
должны
выбрать
своём
почему
оригинальную
версию
использованием
Большинство
программистов
языке
предпочитают
разобраться
немного
сложно
почувствуете
различные
адаптеры
они
делают
станет
возиться
различными
цикла
новые
векторы
фокусируется
высокоуровневой
цели
абстрагирует
часть
обычного
легче
увидеть
уникальные
этого
такие
условие
фильтрации
пройти
каждый
итераторе
действительно
эти
две
эквивалентны
Интуитивно
можно
предположить
низкоуровневый
цикл
быстрее
поговорим
