Язык
программирования
Предисловие
Введение
чего
начать
Установка
Привет
Мир
Программирование
игры
загадки
Общие
концепции
Переменные
изменяемость
Типы
Данных
Функции
Комментарии
Управляющие
конструкции
Понимание
владения
Что
такое
владение
Ссылки
заимствование
Тип
среза
Использование
структур
объединения
связанных
Определение
создание
экземпляров
Пример
программы
использующей
структуры
Синтаксис
метода
Перечисления
сопоставление
образцом
Конструкция
потока
управления
Лаконичный
поток
Управление
растущими
проектами
помощью
пакетов
крейтов
модулей
Пакеты
крейты
областью
действия
конфиденциальностью
Пути
элемент
дереве
путей
область
видимости
ключевого
слова
коллекции
Хранение
списков
значений
векторами
закодированного
текста
строками
ключей
связанными
значениями
Обработка
ошибок
Неустранимые
ошибки
Устранимые
трейты
характеристики
время
жизни
Обобщённые
разделяемого
поведения
Валидация
ссылок
сроков
Написание
автоматических
тестов
Как
писать
тесты
выполнением
Организация
Проект
вводом
выводом
командной
строки
Получение
аргументов
Чтение
файла
Рефакторинг
обеспечения
модульности
улучшения
обработки
Разработка
функциональности
библиотеки
разработки
тестирование
Работа
переменными
среды
Запись
сообщений
ошибках
вместо
Функциональные
возможности
языка
итераторы
замыкания
анонимные
которые
захватывают
своё
окружение
последовательности
элементов
итераторов
Улучшение
нашего
проекта
Сравнение
производительности
циклы
Подробнее
Настройка
билдов
профилей
выпуска
Публикация
крейта
Рабочие
области
бинарных
файлов
Расширение
возможностей
добавления
пользовательских
команд
Умные
указатели
указания
данные
куче
умными
указателями
обычными
ссылками
трейта
Выполнение
кода
очистке
умный
указатель
подсчётом
внутренняя
Ссылочные
могут
привести
утечке
памяти
Безбоязненный
параллелизм
потоков
параллельного
выполнения
Пересылка
передачи
потоками
общим
состоянием
Расширяемый
трейтов
объектно
ориентированного
ориентированных
языков
трейт
объектов
допускающих
значения
разных
типов
Реализация
шаблона
проектирования
Шаблоны
Все
места
где
использоваться
Опровержимость
может
шаблон
соответствовать
Расширенные
Небезопасный
код
Продвинутые
типажи
Макросы
Финальный
многопоточного
веб
сервера
однопоточного
Превращение
многопоточный
сервер
Мягкое
завершение
работы
очистка
Приложения
А
Ключевые
Операторы
символы
Выводимые
Полезные
инструменты
Редакции
Переводы
книги
создаётся
Итак
принимается
решение
том
когда
следует
вызывать
вернуть
панике
имеет
восстановить
Можно
было
бы
любой
ошибочной
ситуации
независимо
того
имеется
способ
восстановления
другой
стороны
вы
принимаете
имени
вызывающего
вас
ситуация
необратима
возвращаете
значение
делегируете
принятие
решения
вызывающему
коду
Вызывающий
попытаться
выполнить
восстановление
способом
который
подходит
данной
он
решить
нельзя
восстановиться
вызовет
превратив
вашу
исправимую
ошибку
неисправимую
Поэтому
возвращение
является
хорошим
выбором
умолчанию
которая
дать
сбой
таких
примеры
прототипы
более
уместно
паникует
возвращения
Давайте
рассмотрим
почему
затем
мы
обсудим
которых
компилятор
доказать
ошибка
невозможна
человек
можете
это
сделать
Глава
будет
заканчиваться
некоторыми
общими
руководящими
принципами
стоит
паниковать
коде
прототипирование
пишете
иллюстрирующий
некоторую
концепцию
наличие
хорошего
менее
понятным
Понятно
примерах
вызов
обозначением
способа
приложении
отличаться
зависимости
делает
остальная
часть
Точно
так
методы
являются
очень
удобными
создании
прототипа
прежде
будете
готовы
обрабатывать
Они
оставляют
чёткие
маркеры
момента
программу
надёжной
тесте
происходит
вызове
хотели
весь
тест
прошёл
этот
метод
тестируемой
функциональностью
Поскольку
которым
помечается
провалившийся
то
нужно
Случаи
больше
информации
компилятора
Также
целесообразно
есть
какая
другая
логика
гарантирует
иметь
логику
понимает
прежнему
которое
обработать
любая
операция
которую
вызываете
ещё
возможность
неудачи
целом
логически
невозможно
вашей
конкретной
проверяя
вручную
убедиться
никогда
вариант
вполне
допустимо
лучше
задокументировать
причину
которой
вашему
мнению
варианта
тексте
создаём
экземпляр
анализируя
жёстко
закодированную
строку
увидеть
действительным
адресом
здесь
Однако
закодированной
допустимой
меняет
возвращаемого
получаем
заставляет
нас
обращаться
возможен
потому
недостаточно
умён
эта
строка
всегда
действительный
адрес
адреса
пришла
пользователя
она
запрограммированной
программе
следовательно
ошибке
определённо
надёжным
Упоминание
предположения
закодирован
побудит
изменить
лучшей
будущем
нам
потребуется
этого
получить
какого
другого
источника
Руководство
обработке
Желательно
паниковал
оказаться
некорректном
состоянии
этом
контексте
некорректное
состояние
некоторое
допущение
гарантия
контракт
инвариант
были
нарушены
Например
недопустимые
противоречивые
пропущенные
передаются
ваш
один
несколько
пунктов
следующего
перечисленного
списке
неожиданное
отличается
происходить
времени
пользователь
вводит
неправильном
формате
этой
точки
должен
полагаться
находится
проверок
наличия
проблемы
каждом
этапе
Нет
закодировать
данную
информацию
типах
используете
имеем
виду
разделе
Кодирование
состояний
основе
главы
кто
вызывает
передаёт
имеют
смысла
всего
мог
хочет
делать
случае
тех
случаях
продолжение
быть
небезопасным
вредным
лучшим
оповещение
использующего
библиотеку
его
исправить
её
Аналогично
внешний
неподконтрольный
вам
возвращает
недопустимое
ожидается
качестве
примера
синтаксический
анализатор
которому
передали
неправильно
сформированные
запрос
возвращающий
статус
указывающий
достигли
ограничения
частоту
запросов
этих
возврат
означает
ожидаемой
выполняет
операцию
подвергнуть
риску
вызывается
использованием
недопустимых
сначала
проверить
допустимость
недопустимы
рекомендуется
основном
соображений
безопасности
попытка
оперировать
некорректными
данными
уязвимостям
основная
причина
стандартная
библиотека
доступ
границ
массива
относящейся
текущей
структуре
известной
проблемой
часто
контракты
их
поведение
гарантируется
входные
отвечают
определённым
требованиям
Паника
нарушении
контракта
смысл
указывает
дефект
явно
обрабатывал
самом
деле
разумного
программисты
вызывающие
должны
свой
особенно
нарушение
панику
описать
документации
Тем
множества
всех
ваших
функциях
многословным
раздражительным
счастью
использовать
систему
проверку
компилятором
сделала
множество
ваша
функция
определённый
параметра
продолжить
работу
логикой
зная
уже
обеспечил
правильное
используется
обычный
программа
ожидает
ничего
оба
определённого
пытающийся
передавать
функцию
компилироваться
должна
проверять
такой
случай
целого
типа
знака
такого
параметр
отрицательным
проверки
разовьём
идею
использования
системы
корректное
пользовательского
валидации
Вспомним
игру
угадывания
числа
наш
просил
угадать
число
проверяли
предположение
лежит
этими
числами
сравнением
загаданным
нами
числом
оно
положительно
последствия
страшными
наши
сообщения
Слишком
много
мало
консоль
равно
правильными
Но
подталкивать
правильным
догадкам
различное
случаев
предлагает
пределами
диапазона
буквы
цифр
способов
добиться
пытаться
разобрать
введённое
разрешить
потенциально
отрицательные
добавить
нахождение
диапазоне
Выражение
проверяет
наше
сообщает
пользователю
проблеме
следующую
итерацию
цикла
попросить
ввести
другое
выражения
можем
идеальное
чрезвычайно
важно
работала
существовало
функций
требующих
такая
проверка
каждой
была
утомительной
могла
отрицательно
повлиять
производительность
создать
новый
поместить
создания
экземпляра
повторяя
везде
Таким
образом
своих
сигнатурах
уверены
значениях
им
передают
Листинг
показывает
определить
создавался
условии
получает
создавать
экземпляры
определяем
структуру
именем
поле
котором
храниться
реализуем
ассоциированную
создающую
теле
проходит
эту
вызываем
оповестит
программиста
написавшего
необходимо
значением
заданного
нарушает
полагается
Условия
описаны
соглашения
указывающие
появления
создадите
Главе
которого
поля
значению
возвращаем
названием
заимствует
других
параметров
иногда
называют
извлекатель
цель
состоит
извлечь
полей
публичный
необходимым
приватным
чтобы
использующий
устанавливать
напрямую
модуля
гарантируя
проверенное
условиями
принимает
объявить
своей
сигнатуре
необходимости
дополнительные
Итоги
призваны
помочь
написанию
надёжного
Макрос
сигнализирует
позволяет
сказать
процессу
прекратил
попытки
неверными
Перечисление
использует
сообщить
операции
завершиться
неудачей
потенциальный
успех
потенциальную
неудачу
сделает
лицом
неизбежных
проблем
Теперь
увидели
способы
обобщённых
стандартной
библиотеке
поговорим
работают
своём
