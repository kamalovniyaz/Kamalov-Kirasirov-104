Общие
типы
трейты
характеристики
время
жизни
Язык
программирования
Предисловие
Введение
чего
начать
Установка
Привет
Мир
Программирование
игры
загадки
концепции
Переменные
изменяемость
Данных
Функции
Комментарии
Управляющие
конструкции
Понимание
владения
Что
такое
владение
Ссылки
заимствование
Тип
среза
Использование
структур
объединения
связанных
Определение
создание
экземпляров
Пример
программы
использующей
структуры
Синтаксис
метода
Перечисления
сопоставление
образцом
Конструкция
потока
управления
Лаконичный
поток
Управление
растущими
проектами
помощью
пакетов
крейтов
модулей
Пакеты
крейты
областью
действия
конфиденциальностью
Пути
элемент
дереве
путей
область
видимости
ключевого
слова
коллекции
Хранение
списков
значений
векторами
закодированного
текста
строками
ключей
связанными
значениями
Обработка
ошибок
Неустранимые
ошибки
Устранимые
Обобщённые
разделяемого
поведения
Валидация
ссылок
сроков
Написание
автоматических
тестов
Как
писать
тесты
выполнением
Организация
Проект
вводом
выводом
командной
строки
Получение
аргументов
Чтение
файла
Рефакторинг
обеспечения
модульности
улучшения
обработки
Разработка
функциональности
библиотеки
разработки
тестирование
Работа
переменными
среды
Запись
сообщений
ошибках
вместо
Функциональные
возможности
языка
итераторы
замыкания
анонимные
которые
захватывают
своё
окружение
последовательности
элементов
итераторов
Улучшение
нашего
проекта
Сравнение
производительности
циклы
Подробнее
Настройка
билдов
профилей
выпуска
Публикация
крейта
Рабочие
области
бинарных
файлов
Расширение
возможностей
добавления
пользовательских
команд
Умные
указатели
указания
данные
куче
умными
указателями
обычными
ссылками
трейта
Выполнение
кода
очистке
умный
указатель
подсчётом
внутренняя
Ссылочные
могут
привести
утечке
памяти
Безбоязненный
параллелизм
потоков
параллельного
выполнения
Пересылка
передачи
потоками
общим
состоянием
Расширяемый
трейтов
объектно
ориентированного
ориентированных
языков
трейт
объектов
допускающих
значения
разных
типов
Реализация
шаблона
проектирования
Шаблоны
Все
места
где
использоваться
Опровержимость
может
шаблон
соответствовать
Расширенные
Небезопасный
код
Продвинутые
типажи
Макросы
Финальный
многопоточного
веб
сервера
однопоточного
Превращение
многопоточный
сервер
Мягкое
завершение
работы
очистка
Приложения
А
Ключевые
Операторы
символы
Выводимые
Полезные
инструменты
Редакции
Переводы
книги
создаётся
Каждый
имеет
своём
арсенале
эффективные
средства
борьбы
дублированием
В
одним
таких
инструментов
являются
Это
абстрактные
подставные
место
которых
возможно
поставить
какой
конкретный
другое
свойство
мы
пишем
можем
выразить
поведение
обобщённых
их
связь
другими
обобщёнными
типами
зная
будет
использован
месте
компиляции
запуске
принимать
параметры
некоторого
обобщённого
типа
привычных
конкретных
Аналогично
функция
принимает
неизвестными
заранее
выполнять
одинаковые
несколькими
конкретными
самом
деле
уже
использовали
Главе
этой
вы
узнаете
определить
собственные
методы
используя
Прежде
всего
рассмотрим
уменьшения
дублирования
извлечь
некоторую
общую
функциональность
Далее
будем
использовать
тот
механизм
создания
обобщённой
двух
функций
отличаются
типом
параметров
также
объясним
определении
перечислений
этого
изучим
определения
обобщённом
виде
Можно
комбинировать
обобщённый
мог
такие
имеют
определённое
подряд
конце
обсудим
времена
вариации
дают
компилятору
информацию
том
сроки
относятся
друг
другу
позволяют
нам
указать
дополнительную
одолженных
значениях
которая
позволит
удостовериться
корректности
используемых
тех
ситуациях
компилятор
сделать
автоматически
Удаление
выделения
общей
обобщениях
заменить
заполнитель
обозначающую
несколько
позволяет
удалить
дублирующийся
углубляться
давайте
сначала
посмотрим
дублирование
задействуя
универсальные
путём
извлечения
заменяет
определённые
заполнителем
представляющим
Затем
применим
ту
технику
универсальной
Изучив
распознать
дублированный
который
функцию
начнёте
распознавать
Начнём
короткой
листинге
находит
наибольшее
число
списке
Файл
Листинг
Поиск
наибольшего
числа
чисел
Сохраним
список
целых
переменной
поместим
первое
значение
списка
переменную
переберём
элементы
текущий
больше
сохранённого
заменим
меньше
равен
наибольшему
найденному
ранее
оставим
прежним
перейдём
следующему
элементу
перебора
всех
переменная
должна
содержать
которое
нашем
случае
равно
Теперь
нами
стоит
задача
найти
списках
дублировать
листинга
логику
местах
показано
поиска
Несмотря
то
работает
утомительно
подвержено
ошибкам
внесении
изменений
должны
забыть
обновить
каждое
дублируется
устранения
создать
абстракцию
сможет
работать
любым
списком
переданным
ей
качестве
входного
параметра
находить
Данное
решение
делает
более
ясным
абстрактным
образом
реализовать
алгоритм
извлекаем
именем
вызываем
эту
любого
другого
встретиться
позже
Абстрактный
параметр
представляет
любой
срез
передать
неё
результате
вызова
выполнится
переданными
Итак
шаги
выполненные
изменения
поместить
его
тело
определив
входные
выходные
сигнатуре
два
участка
дублирующегося
вызовом
одной
уменьшить
воспользуемся
теми
шагами
абстрактными
таким
Например
нас
есть
две
одна
ищет
наибольший
другая
выяснять
