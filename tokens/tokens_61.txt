Сравнение
производительности
циклы
итераторы
Язык
программирования
Предисловие
Введение
чего
начать
Установка
Привет
Мир
Программирование
игры
загадки
Общие
концепции
Переменные
изменяемость
Типы
Данных
Функции
Комментарии
Управляющие
конструкции
Понимание
владения
Что
такое
владение
Ссылки
заимствование
Тип
среза
Использование
структур
объединения
связанных
Определение
создание
экземпляров
Пример
программы
использующей
структуры
Синтаксис
метода
Перечисления
сопоставление
образцом
Конструкция
потока
управления
Лаконичный
поток
Управление
растущими
проектами
помощью
пакетов
крейтов
модулей
Пакеты
крейты
областью
действия
конфиденциальностью
Пути
элемент
дереве
путей
область
видимости
ключевого
слова
коллекции
Хранение
списков
значений
векторами
закодированного
текста
строками
ключей
связанными
значениями
Обработка
ошибок
Неустранимые
ошибки
Устранимые
трейты
характеристики
время
жизни
Обобщённые
разделяемого
поведения
Валидация
ссылок
сроков
Написание
автоматических
тестов
писать
тесты
выполнением
Организация
Проект
вводом
выводом
командной
строки
Получение
аргументов
Чтение
файла
Рефакторинг
обеспечения
модульности
улучшения
обработки
Разработка
функциональности
библиотеки
разработки
тестирование
Работа
переменными
среды
Запись
сообщений
ошибках
вместо
Функциональные
возможности
языка
замыкания
анонимные
которые
захватывают
своё
окружение
последовательности
элементов
итераторов
Улучшение
нашего
проекта
Подробнее
Настройка
билдов
профилей
выпуска
Публикация
крейта
Рабочие
области
бинарных
файлов
Расширение
возможностей
добавления
пользовательских
команд
Умные
указатели
указания
данные
куче
умными
указателями
обычными
ссылками
трейта
Выполнение
кода
очистке
умный
указатель
подсчётом
внутренняя
Ссылочные
могут
привести
утечке
памяти
Безбоязненный
параллелизм
потоков
параллельного
выполнения
Пересылка
передачи
потоками
общим
состоянием
Расширяемый
трейтов
объектно
ориентированного
ориентированных
языков
трейт
объектов
допускающих
значения
разных
типов
Реализация
шаблона
проектирования
Шаблоны
Все
места
где
использоваться
Опровержимость
может
шаблон
соответствовать
Расширенные
Небезопасный
код
Продвинутые
типажи
Макросы
Финальный
многопоточного
веб
сервера
однопоточного
Превращение
многопоточный
сервер
Мягкое
завершение
работы
очистка
Приложения
Ключевые
Операторы
символы
Выводимые
Полезные
инструменты
Редакции
Переводы
книги
создаётся
циклов
Чтобы
определить
лучше
использовать
нужно
знать
какая
быстрее
версия
явным
циклом
итераторами
Мы
выполнили
тест
разместив
всё
содержимое
строку
типа
поискали
слово
её
содержимом
результаты
теста
использованием
цикла
была
немного
будем
приводить
здесь
непосредственно
идея
том
доказать
решения
точности
эквивалентны
получить
общее
представление
эти
две
реализации
близки
более
исчерпывающего
вам
проверить
различные
тексты
размеров
качестве
содержимого
разные
различной
длины
всевозможные
другие
варианты
Дело
будучи
высокоуровневой
абстракцией
компилируются
примерно
тот
вы
написали
его
низкоуровневый
вариант
самостоятельно
это
одна
абстракций
нулевой
стоимостью
которой
подразумеваем
абстракции
накладывает
дополнительных
расходов
Аналогично
тому
Бьёрн
Страуструп
дизайнер
разработчик
определяет
нулевые
накладные
расходы
книге
целом
подчиняется
принципу
отсутствия
накладных
то
чем
пользуетесь
платить
далее
используете
нельзя
сделать
ещё
другого
примера
приведём
взятый
аудио
декодера
Алгоритм
декодирования
использует
математическую
операцию
линейного
предсказания
оценки
будущих
основе
линейной
предыдущих
выборок
комбинирование
вызовов
итератора
математических
вычислений
трёх
переменных
срез
массив
коэффициентов
число
сдвига
переменной
определены
примере
имеют
начальных
этот
имеет
большого
контекста
он
является
кратким
реальным
примером
того
переводит
идеи
высокого
уровня
низкого
вычислить
значение
перебирает
каждое
метод
предыдущими
Затем
каждой
пары
перемножаем
суммируем
суммы
сдвигаем
биты
вправо
переменную
таких
приложениях
декодеры
часто
требуется
производительность
создаём
итератор
используя
два
адаптера
впоследствии
потребляющих
какой
ассемблерный
будет
компилироваться
момент
написания
этой
главы
компилируется
самое
руками
существует
соответствующего
итерации
значениям
коэффициентах
знает
двенадцать
итераций
поэтому
разворачивает
цикл
Разворачивание
оптимизация
которая
устраняет
издержки
этого
генерирует
повторяющийся
коэффициенты
сохраняются
регистрах
означает
очень
быстрый
доступ
Нет
никаких
проверок
границ
доступа
массиву
оптимизации
применить
делают
полученный
чрезвычайно
эффективным
Теперь
знаете
используйте
страха
Они
представляют
высокоуровневом
виде
потери
Итоги
вдохновлённые
идеями
функциональных
позволяют
ясно
выражать
производительностью
низкоуровневого
замыканий
таковы
влияния
целей
направленных
обеспечение
улучшили
нашем
проекте
рассмотрим
некоторые
нам
предоставляет
публикации
репозитории
