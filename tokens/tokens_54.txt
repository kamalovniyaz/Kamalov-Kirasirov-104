Разработка
функциональности
библиотеки
помощью
разработки
тестирование
Язык
программирования
Предисловие
Введение
чего
начать
Установка
Привет
Мир
Программирование
игры
загадки
Общие
концепции
Переменные
изменяемость
Типы
Данных
Функции
Комментарии
Управляющие
конструкции
Понимание
владения
Что
такое
владение
Ссылки
заимствование
Тип
среза
Использование
структур
объединения
связанных
Определение
создание
экземпляров
Пример
программы
использующей
структуры
Синтаксис
метода
Перечисления
сопоставление
образцом
Конструкция
потока
управления
Лаконичный
поток
Управление
растущими
проектами
пакетов
крейтов
модулей
Пакеты
крейты
областью
действия
конфиденциальностью
Пути
элемент
дереве
путей
область
видимости
ключевого
слова
коллекции
Хранение
списков
значений
векторами
закодированного
текста
строками
ключей
связанными
значениями
Обработка
ошибок
Неустранимые
ошибки
Устранимые
трейты
характеристики
время
жизни
Обобщённые
разделяемого
поведения
Валидация
ссылок
сроков
Написание
автоматических
тестов
писать
тесты
выполнением
Организация
Проект
вводом
выводом
командной
строки
Получение
аргументов
Чтение
файла
Рефакторинг
обеспечения
модульности
улучшения
обработки
Работа
переменными
среды
Запись
сообщений
ошибках
вместо
Функциональные
возможности
языка
итераторы
замыкания
анонимные
которые
захватывают
своё
окружение
последовательности
элементов
итераторов
Улучшение
нашего
проекта
Сравнение
производительности
циклы
Подробнее
Настройка
билдов
профилей
выпуска
Публикация
крейта
Рабочие
области
бинарных
файлов
Расширение
возможностей
добавления
пользовательских
команд
Умные
указатели
указания
данные
куче
умными
указателями
обычными
ссылками
трейта
Выполнение
кода
очистке
умный
указатель
подсчётом
внутренняя
Ссылочные
могут
привести
утечке
памяти
Безбоязненный
параллелизм
потоков
параллельного
выполнения
Пересылка
передачи
потоками
общим
состоянием
Расширяемый
трейтов
объектно
ориентированного
ориентированных
языков
трейт
объектов
допускающих
значения
разных
типов
Реализация
шаблона
проектирования
Шаблоны
Все
места
где
использоваться
Опровержимость
может
шаблон
соответствовать
Расширенные
Небезопасный
код
Продвинутые
типажи
Макросы
Финальный
многопоточного
веб
сервера
однопоточного
Превращение
многопоточный
сервер
Мягкое
завершение
работы
очистка
Приложения
Ключевые
Операторы
символы
Выводимые
Полезные
инструменты
Редакции
Переводы
книги
создаётся
Развитие
разработкой
основе
Теперь
мы
извлекли
логику
оставили
разбор
обработку
стало
гораздо
проще
основной
можем
вызывать
напрямую
различными
аргументами
проверить
возвращаемые
необходимости
вызова
двоичного
этом
разделе
программу
добавим
поиска
использованием
процесса
который
следует
этим
шагам
Напишите
тест
завершается
неудачей
запустите
его
убедиться
он
сработал
той
причине
которую
вы
ожидаете
Пишите
изменяйте
ровно
столько
успешно
выполнился
новый
Выполните
добавили
изменили
убедитесь
продолжают
проходить
Повторите
шага
это
один
многих
способов
написания
программного
помочь
разработке
теста
написанием
обеспечивающего
прохождение
помогает
поддерживать
высокое
покрытие
тестами
протяжении
всего
протестируем
реализацию
которая
делает
поиск
запроса
содержимом
списка
строк
соответствующих
запросу
эту
функциональность
функцию
названием
ошибкой
Поскольку
они
нам
больше
нужны
давайте
удалим
инструкции
использовали
проверки
Затем
модуль
тестовой
функцией
делали
главе
Тестовая
функция
определяет
поведение
которое
хотим
она
должна
принимать
запрос
текст
возвращать
те
содержат
листинге
показан
этот
пока
компилируется
Файл
Листинг
безуспешного
создать
ищет
строку
котором
ищем
состоит
трёх
одна
которых
содержит
обратите
внимание
обратная
косая
черта
открывающей
двойной
кавычки
говорит
помещать
символ
новой
начало
содержимого
этого
строкового
литерала
проверяем
значение
возвращаемое
ожидаемую
нами
запустить
увидеть
сбой
потому
ещё
существует
соответствии
принципами
компилировался
запускался
добавив
всегда
возвращает
пустой
вектор
показано
Потом
должен
скомпилироваться
потерпеть
неудачу
запуске
равен
вектору
содержащему
достаточное
скомпилировался
Заметьте
сигнатуре
нужно
явно
указать
аргумента
возвращаемого
Напомним
Главы
параметры
времени
указывают
временем
какого
связано
данном
случае
говорим
возвращаемый
содержать
срезы
ссылающиеся
содержимое
Другими
словами
будут
жить
тех
пор
живут
переданные
аргумент
важно
были
действительными
ссылаются
срезов
тоже
должны
быть
компилятор
предполагает
делаем
строковые
переменной
неправильно
выполнит
проверку
безопасности
забудем
аннотации
попробуем
скомпилировать
получим
следующую
ошибку
понять
какой
двух
нужен
поэтому
сказать
ему
Так
является
тем
аргументом
весь
наш
вернуть
части
совпали
поиске
понимаем
связан
возвращаемым
значением
Другие
языки
требуют
вас
связывания
возвращаемыми
определённой
практики
вам
станет
Можете
сравнить
разделом
Проверка
временами
Запустим
Отлично
ожидали
сделаем
срабатывал
прохождения
Сейчас
проходит
возвращаем
Чтобы
исправить
реализовать
наша
программа
выполнить
следующие
шаги
Итерироваться
каждой
строке
данная
строка
искомую
добавить
её
список
ничего
делать
результатов
проработаем
каждый
шаг
начиная
перебора
Перебор
есть
полезный
метод
построчной
итерации
удобно
названный
Итерация
итератор
подробно
поговорим
итераторах
вспомните
видели
способ
использования
итератора
цикл
итератором
некоторый
каждого
элемента
Далее
текущая
нашу
счастью
Добавьте
вызов
Добавление
содержится
данный
момент
наращиваем
заставить
компилироваться
тела
указали
Сохранение
совпавшей
завершить
сохранить
совпадающие
изменяемый
циклом
сохранения
векторе
После
цикла
Сохраняем
совпавшие
впоследствии
их
можно
было
возвратить
содержащие
пройти
пройден
значит
работает
этапе
могли
рассмотреть
изменения
реализации
сохраняя
поддерживая
имеющуюся
плох
использует
некоторые
Вернёмся
этому
примеру
будем
исследовать
посмотрим
улучшить
протестирована
вызвать
нашей
передать
читает
Тогда
напечатает
каждую
возвращаемую
прежнему
используем
возврата
печати
вся
работать
сначала
словом
должно
одну
строчку
стихотворения
Эмили
Дикинсон
Здорово
слово
будет
нескольким
строкам
например
наконец
удостоверимся
получаем
никаких
отсутствующее
стихотворении
создали
собственную
мини
версию
классического
инструмента
научились
тому
структурировать
также
немного
узнали
файловом
вводе
выводе
временах
тестировании
разборе
кратко
продемонстрируем
пару
вещей
окружения
печатать
стандартный
обе
полезны
написании
консольных
программ
